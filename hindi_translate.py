# -*- coding: utf-8 -*-
"""hindi_translate

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ansCTzSnVuLK1fDyvnHrts2sBU5knUt
"""

from google.colab import drive
drive.mount('/content/drive')

# Install required packages
!pip install requests beautifulsoup4 pandas pillow pytesseract googletrans==4.0.0-rc1 easyocr pdf2image
!apt install tesseract-ocr
!apt install tesseract-ocr-hin
!apt install poppler-utils

# Imports
import requests
from bs4 import BeautifulSoup
from googletrans import Translator
import pandas as pd
import pytesseract
from PIL import Image
import io
import re
import time
import os
import easyocr
from pdf2image import convert_from_path

# Initialize translator & OCR reader
translator = Translator()
reader = easyocr.Reader(['hi'])

# Language map
lang_code_to_name = {
    'en': 'English', 'kn': 'Kannada', 'mr': 'Marathi',
    'ta': 'Tamil', 'te': 'Telugu', 'ml': 'Malayalam', 'or': 'Odia',
    'pa': 'Punjabi', 'ur': 'Urdu'
}
target_languages = list(lang_code_to_name.keys())

# === OCR Functions ===

# Online image - EasyOCR
def extract_hindi_from_online_image_easyocr(img_url):
    try:
        response = requests.get(img_url)
        img_bytes = io.BytesIO(response.content)
        with open("/tmp/temp_online_img.jpg", "wb") as f:
            f.write(img_bytes.getvalue())
        result = reader.readtext("/tmp/temp_online_img.jpg", detail=0, paragraph=True)
        hindi_text = ' '.join([line.strip() for line in result if any('ऀ' <= c <= 'ॿ' for c in line)])
        return hindi_text.strip()
    except Exception as e:
        print(f"EasyOCR error (online image): {e}")
        return ""

# Online image - Tesseract
def extract_hindi_from_online_image_tesseract(img_url):
    try:
        response = requests.get(img_url)
        img = Image.open(io.BytesIO(response.content))
        text = pytesseract.image_to_string(img, lang='hin')
        return text.strip()
    except Exception as e:
        print(f"Tesseract error (online image): {e}")
        return ""

# Local image - EasyOCR
def extract_hindi_from_image_local_easyocr(img_path):
    try:
        result = reader.readtext(img_path, detail=0, paragraph=True)
        hindi_text = ' '.join([line.strip() for line in result if any('ऀ' <= c <= 'ॿ' for c in line)])
        return hindi_text.strip()
    except Exception as e:
        print(f"EasyOCR error (image): {e}")
        return ""

# Local image - Tesseract
def extract_hindi_from_image_local_tesseract(img_path):
    try:
        img = Image.open(img_path)
        text = pytesseract.image_to_string(img, lang='hin')
        return text.strip()
    except Exception as e:
        print(f"Tesseract OCR error (image): {e}")
        return ""

# Local PDF (OCR on each page)
def extract_hindi_from_pdf(pdf_path):
    try:
        images = convert_from_path(pdf_path)
        all_text = []
        for img in images:
            img_path = "/tmp/page.png"
            img.save(img_path)

            easy_text = extract_hindi_from_image_local_easyocr(img_path)
            tess_text = extract_hindi_from_image_local_tesseract(img_path)

            combined = easy_text + "\n" + tess_text
            if combined.strip():
                all_text.append(combined.strip())
        return all_text
    except Exception as e:
        print(f"PDF OCR error: {e}")
        return []

# Web URL extraction
def extract_hindi_text_from_website(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        hindi_lines = []
        for tag in soup.find_all(['p', 'div', 'span']):
            text = tag.get_text(strip=True)
            if any('ऀ' <= c <= 'ॿ' for c in text):
                clean_text = ' '.join(text.strip().split())
                hindi_lines.append(clean_text)
        return hindi_lines
    except Exception as e:
        print(f"!! Error fetching from {url}: {e}")
        return []

# Translate Hindi to target languages
def translate_to_languages(text, target_langs):
    translations = {}
    for lang in target_langs:
        try:
            result = translator.translate(text, src='hi', dest=lang)
            translations[lang] = result.text
        except Exception as e:
            translations[lang] = f"Translation Error: {e}"
    return translations

# === Inputs ===

urls = [
    "https://www.orfonline.org/hindi/expert-speak/aagnivir-scheme-revolutionise-the-indian-defence-system106233",
    "https://www.bhaskar.com/national/news/rajnath-singh-defence-production-growth-update-indian-army-133275463.html",
    "https://www.orfonline.org/hindi/expert-speak/light-weight-tanks-in-indian-army-indigenous-development-k-9-vajra#:~:text",
    "https://hi.wikipedia.org/wiki/%E0%A4%AD%E0%A4%BE%E0%A4%B0%E0%A4%A4%E0%A5%80%E0%A4%AF_%E0%A4%A5%E0%A4%B2%E0%A4%B8%E0%A5%87%E0%A4%A8%E0%A4%BE",
    "https://www.livehindustan.com/national/story-how-night-vision-camera-useful-for-army-in-the-battlefield-during-night-hours-1747068.html#google_vignette",
    "https://hindi.oneindia.com/news/uttar-pradesh/agniveer-bharti-2025-online-apply-army-recruitment-exam-date-eligibility-physical-test-details-1248609.html",
    "https://hi.wikipedia.org/wiki/%E0%A5%A7%E0%A5%AF%E0%A5%AD%E0%A5%A7_%E0%A4%95%E0%A4%BE_%E0%A4%AD%E0%A4%BE%E0%A4%B0%E0%A4%A4-%E0%A4%AA%E0%A4%BE%E0%A4%95_%E0%A4%AF%E0%A5%81%E0%A4%A6%E0%A5%8D%E0%A4%A7#:~:text",
    "https://www.drishtiias.com/hindi/daily-updates/daily-news-editorials/technological-penetration-in-indian-army",
    "https://hi.wikipedia.org/wiki/%E0%A4%AD%E0%A4%BE%E0%A4%B0%E0%A4%A4%E0%A5%80%E0%A4%AF_%E0%A4%A5%E0%A4%B2%E0%A4%B8%E0%A5%87%E0%A4%A8%E0%A4%BE",
    "http://indpaedia.com/ind/index.php/Indian_Army:_weapons,_equipment",
    "https://www.amarujala.com/india-news/indian-army-infantry-and-regiment-system-history-explained-in-hindi?pageId=3",
    "https://www.indiawave.in/top-story-of-the-day/about-indian-army-how-many-regiments-in-indian-army-regiments-details/",
    "https://www.amarujala.com/india-news/know-about-the-special-regiments-of-the-army-and-be-proud-of-the-indian-army?pageId=1"]

online_image_urls = [
    "https://i.pinimg.com/1200x/0a/c4/94/0ac4944e930b876059607c4efc911aeb.jpg",
    "https://i.pinimg.com/1200x/cb/fe/57/cbfe57d6992975408c34b64e40566eac.jpg",
    "https://i.pinimg.com/1200x/e6/e1/53/e6e1536aaede4a37664b32b320bd0d48.jpg",
    "https://i.pinimg.com/1200x/5a/b4/16/5ab416169e668ab310aca94bbc8ed998.jpg",
    "https://i.pinimg.com/1200x/f9/4b/93/f94b93afcfc975b294549b60ebf363b1.jpg"
]

local_images = [# Local image paths
    "/content/drive/MyDrive/language_translate_project/image/handwritten_image_1.jpg",
    "/content/drive/MyDrive/language_translate_project/image/handwritten_image_2.jpg",
    "/content/drive/MyDrive/language_translate_project/image/handwritten_image_3.jpg",
    "/content/drive/MyDrive/language_translate_project/image/handwritten_image_4.jpg",
    "/content/drive/MyDrive/language_translate_project/image/handwritten_image_5.jpg"


]

local_pdfs = [
    "/content/drive/MyDrive/language_translate_project/military_data.pdf"        # Local PDF paths
]

# === Collect All Hindi Texts ===

all_hindi_texts = []

# From websites
for url in urls:
    hindi_texts = extract_hindi_text_from_website(url)
    cleaned = [' '.join(t.strip().split()) for t in hindi_texts if len(t.strip()) > 3]
    all_hindi_texts.extend(cleaned)

# From local images
for img_path in local_images:
    easy_text = extract_hindi_from_image_local_easyocr(img_path)
    tess_text = extract_hindi_from_image_local_tesseract(img_path)
    for line in [easy_text, tess_text]:
        if line and any('ऀ' <= c <= 'ॿ' for c in line):
            all_hindi_texts.append(line.strip())

# From PDFs
for pdf in local_pdfs:
    pdf_texts = extract_hindi_from_pdf(pdf)
    cleaned = [' '.join(t.strip().split()) for t in pdf_texts if len(t.strip()) > 3]
    all_hindi_texts.extend(cleaned)

# From online image URLs
for url in online_image_urls:
    easy_text = extract_hindi_from_online_image_easyocr(url)
    tess_text = extract_hindi_from_online_image_tesseract(url)
    for line in [easy_text, tess_text]:
        if line and any('ऀ' <= c <= 'ॿ' for c in line):
            all_hindi_texts.append(line.strip())

# ✅ Remove duplicates and short entries
all_hindi_texts = list(dict.fromkeys([t for t in all_hindi_texts if len(t) > 3]))

# === Translation ===

translation_data = []
start_time = time.time()

for text in all_hindi_texts:
    translations = translate_to_languages(text, target_languages)
    row = {'Hindi': text}
    for lang_code, translated in translations.items():
        lang_name = lang_code_to_name.get(lang_code, lang_code)
        row[f'Translation ({lang_name})'] = translated
    translation_data.append(row)

end_time = time.time()
print(f"✅ Translation completed in {end_time - start_time:.2f} seconds")

# === Save & Preview ===

df = pd.DataFrame(translation_data)
df.to_csv("hindi_to_multi_lang_translations.csv", index=False, encoding='utf-8-sig')
print("✅ CSV saved as 'hindi_to_multi_lang_translations.csv'")

df.head()

# Download in Colab
from google.colab import files
files.download("hindi_to_multi_lang_translations.csv")

df